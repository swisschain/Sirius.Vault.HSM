package io.swisschain.crypto.address.generation.generators;

import io.swisschain.config.clients.HsmApiConfig;
import io.swisschain.crypto.address.generation.AddressGenerationResult;
import io.swisschain.crypto.address.generation.AddressGenerator;
import io.swisschain.crypto.hsm.HsmConnector;
import io.swisschain.domain.primitives.NetworkType;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Hex;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.stellar.sdk.KeyPair;

import java.io.IOException;

public class HsmStellarAddressGenerator extends HsmConnector implements AddressGenerator {
  private static final Logger logger = LogManager.getLogger();

  public HsmStellarAddressGenerator(HsmApiConfig hsmConfig) {
    super(hsmConfig);
  }

  @Override
  public AddressGenerationResult generate(NetworkType networkType) throws IOException {
    final var keyPair = generateED25519KeyPair();

    var address = KeyPair.fromPublicKey(keyPair.publicKey).getAccountId();
    logger.info("[" + networkType.name() + "]New stellar address generated by HSM: " + address);
    return new AddressGenerationResult(
        address,
        Hex.encodeHexString(keyPair.encryptedPrivateKey),
        null,
        new Base32().encodeAsString(keyPair.publicKey));
  }
}

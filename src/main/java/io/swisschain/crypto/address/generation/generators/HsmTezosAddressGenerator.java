package io.swisschain.crypto.address.generation.generators;

import io.swisschain.config.clients.HsmApiConfig;
import io.swisschain.crypto.address.generation.AddressGenerationResult;
import io.swisschain.crypto.address.generation.AddressGenerator;
import io.swisschain.crypto.exceptions.InvalidPublicKeyException;
import io.swisschain.crypto.hsm.HsmConnector;
import io.swisschain.crypto.utils.tezos.Base58Helper;
import io.swisschain.crypto.utils.tezos.Blacke2bHelper;
import io.swisschain.crypto.utils.tezos.Prefix;
import io.swisschain.primitives.NetworkType;
import org.apache.commons.codec.binary.Hex;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;

//https://github.com/baking-bad/netezos/blob/master/Netezos/Keys/Crypto/Curves/Ed25519.cs
//https://github.com/baking-bad/netezos/blob/master/Netezos/Keys/Key.cs
//https://github.com/baking-bad/netezos/blob/master/Netezos/Keys/PubKey.cs
public class HsmTezosAddressGenerator extends HsmConnector implements AddressGenerator {
  private static final Logger logger = LogManager.getLogger();

  private byte[] publicKeyPrefix = Prefix.edpk;
  private byte[] addressPrefix = Prefix.tz1;

  public HsmTezosAddressGenerator(HsmApiConfig hsmConfig) {
    super(hsmConfig);
  }

  @Override
  public AddressGenerationResult generate(NetworkType networkType)
          throws InvalidPublicKeyException, IOException, NoSuchAlgorithmException {

    final var keyPair = generateED25519KeyPair();

    var address = Base58Helper.convert(Blacke2bHelper.getDigest(keyPair.publicKey, 160), addressPrefix);
    var publicKey =  Base58Helper.convert(keyPair.publicKey, publicKeyPrefix);
    logger.info("[" + networkType.name()+ "] New tezos address generated by HSM: " + address);

    return new AddressGenerationResult(address, Hex.encodeHexString(keyPair.encryptedPrivateKey), null, publicKey);
  }
}
